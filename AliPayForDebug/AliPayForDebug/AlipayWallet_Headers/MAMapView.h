//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIView.h>

#import "CLLocationManagerDelegate-Protocol.h"
#import "MAAnnotationContainerViewDelegate-Protocol.h"
#import "MACompassViewDelegate-Protocol.h"
#import "MAIndoorViewDelegate-Protocol.h"
#import "MAMapEngineMapViewDelegate-Protocol.h"
#import "MAMapLayerDelegate-Protocol.h"
#import "MAMapRenderDelegate-Protocol.h"
#import "MAOverlayContainerViewDelegate-Protocol.h"
#import "UIGestureRecognizerDelegate-Protocol.h"

@class AMapNetworkManager, CLLocationManager, MAAngleIndicator, MAAnimationTaskManager, MAAnnotationContainerView, MACircle, MACompassView, MACusBuildingOverlay, MAGLESUnity, MAIndoorInfo, MAIndoorView, MAMapRender, MAOverlayContainerView, MAScaleViewLite, MATapPanToZoomGestureRecognizer, MAUserLocation, MAUserLocationRepresentation, MAViewRecycler, MAWorldMapTileOverlay, MapStatus, NSData, NSDictionary, NSMutableArray, NSMutableDictionary, NSNumber, NSString, UIColor, UIImageView, UILabel, UILongPressGestureRecognizer, UIPanGestureRecognizer, UIPinchGestureRecognizer, UIRotationGestureRecognizer, UITapGestureRecognizer;
@protocol MAMapViewDelegate;

@interface MAMapView : UIView <UIGestureRecognizerDelegate, CLLocationManagerDelegate, MAMapEngineMapViewDelegate, MAMapRenderDelegate, MAOverlayContainerViewDelegate, MAAnnotationContainerViewDelegate, MACompassViewDelegate, MAMapLayerDelegate, MAIndoorViewDelegate>
{
    MAMapRender *_render;
    MAOverlayContainerView *_overlayContainerView;
    _Bool _allowsAnnotationViewSorting;
    MAAnnotationContainerView *_annotationContainerView;
    MAViewRecycler *_recycler;
    struct MAMapRect _lastAnnotationValidRect;
    double _lastAnnotationValidZoom;
    CLLocationManager *_locationManager;
    MACircle *_userLocationCircle;
    MAAngleIndicator *_angleIndicator;
    _Bool _userLocationViewIsCustomized;
    double _headingOffset;
    UITapGestureRecognizer *_zoomInGestureRecognizer;
    UITapGestureRecognizer *_zoomOutGestureRecognizer;
    UIPinchGestureRecognizer *_zoomPinchGestureRecognizer;
    UIPanGestureRecognizer *_panGestureRecognizer;
    UIPanGestureRecognizer *_pullGestureRecognizer;
    UIRotationGestureRecognizer *_rotateGestureRecognizer;
    UITapGestureRecognizer *_singleTapGestureRecognizer;
    UILongPressGestureRecognizer *_longPressGestureRecognizer;
    MATapPanToZoomGestureRecognizer *_tapPanToZoomGestureRecognizer;
    MAAnimationTaskManager *_animationManager;
    MACompassView *_compassView;
    MAScaleViewLite *_scaleView;
    double _scaleCalculate;
    MAIndoorView *_indoorView;
    MAIndoorInfo *_indoorInfo;
    _Bool _indoorInternalIsHide;
    UIImageView *_logoImageView;
    double _initCount;
    _Bool _isInitReady;
    _Bool _initRegionChangedAnimated;
    _Bool _isNeedUpdateAnnotationView;
    _Bool _forceUpdateReusingPool;
    MapStatus *_mapStatusBeforeReload;
    unsigned long long _countOfRegionOperation;
    MAWorldMapTileOverlay *_internalWorldTileOverlay;
    NSDictionary *_trafficStatus;
    double _maxZoomLevel;
    double _minZoomLevel;
    _Bool _showsIndoorMap;
    _Bool _showsScale;
    _Bool _showIndoorMap;
    _Bool _showsIndoorMapControl;
    _Bool _showsUserLocation;
    MAUserLocation *_userLocation;
    _Bool _customizeUserLocationAccuracyCircleRepresentation;
    long long _userTrackingMode;
    MAUserLocationRepresentation *_userLocationDisplayParam;
    NSString *_customTextureResourcePath;
    NSString *_customMapStyleID;
    _Bool _customMapStyleEnabled;
    UILabel *_labelFPS;
    char *_vectorOverlayBitmap;
    struct CGSize _vectorOverlayBitmapSize;
    NSData *_vectorOverlayData;
    struct CGRect _vectorOverlayRect;
    CDUnknownBlockType _vectorOverlayCompleteBlock;
    double _screenScale;
    NSMutableDictionary *_customBuildingVBODic;
    MACusBuildingOverlay *_cusBuildingOverlay;
    NSMutableArray *_texturesToDelete;
    MAGLESUnity *_glesUnityInstance;
    _Bool _zoomingInPivotsAroundAnchorPoint;
    _Bool _zoomEnabled;
    _Bool _scrollEnabled;
    _Bool _rotateEnabled;
    _Bool _rotateCameraEnabled;
    _Bool _skyModelEnable;
    _Bool _showsBuildings;
    _Bool _showsLabels;
    _Bool _showTraffic;
    _Bool _touchPOIEnabled;
    _Bool _showsCompass;
    _Bool _isAuthSuccessed;
    _Bool _isCustomMapStyleSetSuc;
    id <MAMapViewDelegate> _delegate;
    long long _mapType;
    double _metersPerPointForCurrentZoom;
    NSString *_runLoopMode;
    AMapNetworkManager *_networkManager;
    unsigned long long _authMaxCount;
    double _limitRegionMinZoomLevel;
    NSNumber *_showsWorldMap;
    NSMutableDictionary *_customMapStyleDict;
    UIColor *_customMapStyleBkTileColor;
    CDUnknownBlockType _setMapTypeBlock;
    CDUnknownBlockType _setMapStyleBlock;
    struct CGPoint _screenAnchor;
    struct MACoordinateRegion _limitRegion;
    struct MAMapRect _limitMapRect;
}

+ (_Bool)applicationInBackgroundState;
+ (void)setBuildingHeight:(id)arg1;
+ (Class)layerClass;
@property(copy, nonatomic) CDUnknownBlockType setMapStyleBlock; // @synthesize setMapStyleBlock=_setMapStyleBlock;
@property(copy, nonatomic) CDUnknownBlockType setMapTypeBlock; // @synthesize setMapTypeBlock=_setMapTypeBlock;
@property(retain, nonatomic) UIColor *customMapStyleBkTileColor; // @synthesize customMapStyleBkTileColor=_customMapStyleBkTileColor;
@property(nonatomic) _Bool isCustomMapStyleSetSuc; // @synthesize isCustomMapStyleSetSuc=_isCustomMapStyleSetSuc;
@property(retain, nonatomic) NSMutableDictionary *customMapStyleDict; // @synthesize customMapStyleDict=_customMapStyleDict;
@property(retain, nonatomic, getter=isShowsWorldMap) NSNumber *showsWorldMap; // @synthesize showsWorldMap=_showsWorldMap;
@property(nonatomic) double limitRegionMinZoomLevel; // @synthesize limitRegionMinZoomLevel=_limitRegionMinZoomLevel;
@property(nonatomic) _Bool isAuthSuccessed; // @synthesize isAuthSuccessed=_isAuthSuccessed;
@property(nonatomic) unsigned long long authMaxCount; // @synthesize authMaxCount=_authMaxCount;
@property(retain, nonatomic) AMapNetworkManager *networkManager; // @synthesize networkManager=_networkManager;
@property(copy, nonatomic) NSString *runLoopMode; // @synthesize runLoopMode=_runLoopMode;
@property(nonatomic) double metersPerPointForCurrentZoom; // @synthesize metersPerPointForCurrentZoom=_metersPerPointForCurrentZoom;
@property(nonatomic) _Bool showsCompass; // @synthesize showsCompass=_showsCompass;
@property(nonatomic) _Bool touchPOIEnabled; // @synthesize touchPOIEnabled=_touchPOIEnabled;
@property(nonatomic, getter=isShowTraffic) _Bool showTraffic; // @synthesize showTraffic=_showTraffic;
@property(nonatomic, getter=isShowsLabels) _Bool showsLabels; // @synthesize showsLabels=_showsLabels;
@property(nonatomic, getter=isShowsBuildings) _Bool showsBuildings; // @synthesize showsBuildings=_showsBuildings;
@property(nonatomic, getter=isSkyModelEnabled) _Bool skyModelEnable; // @synthesize skyModelEnable=_skyModelEnable;
@property(nonatomic, getter=isRotateCameraEnabled) _Bool rotateCameraEnabled; // @synthesize rotateCameraEnabled=_rotateCameraEnabled;
@property(nonatomic, getter=isRotateEnabled) _Bool rotateEnabled; // @synthesize rotateEnabled=_rotateEnabled;
@property(nonatomic, getter=isScrollEnabled) _Bool scrollEnabled; // @synthesize scrollEnabled=_scrollEnabled;
@property(nonatomic, getter=isZoomEnabled) _Bool zoomEnabled; // @synthesize zoomEnabled=_zoomEnabled;
@property(nonatomic) _Bool zoomingInPivotsAroundAnchorPoint; // @synthesize zoomingInPivotsAroundAnchorPoint=_zoomingInPivotsAroundAnchorPoint;
@property(nonatomic) struct MAMapRect limitMapRect; // @synthesize limitMapRect=_limitMapRect;
@property(nonatomic) struct MACoordinateRegion limitRegion; // @synthesize limitRegion=_limitRegion;
@property(nonatomic) long long mapType; // @synthesize mapType=_mapType;
@property(nonatomic) __weak id <MAMapViewDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) struct CGPoint screenAnchor; // @synthesize screenAnchor=_screenAnchor;
- (void).cxx_destruct;
@property(nonatomic) _Bool disableCachedMapDataUpdate;
- (void)MAMapViewDeallocOperation;
- (void)dealloc;
- (void)layoutSubviews;
- (void)handlePull:(id)arg1 andView:(id)arg2;
- (void)handleRotate:(id)arg1 andView:(id)arg2;
- (void)handlePinch:(id)arg1 andView:(id)arg2;
- (void)handlePan:(id)arg1 andView:(id)arg2;
- (void)stopRenderByAuth;
- (void)renderMapWithDisplayLinkDuration:(double)arg1 andFrameInterval:(long long)arg2;
- (void)updateDrawableSize:(struct CGSize)arg1;
- (id)initWithFrame:(struct CGRect)arg1 scale:(double)arg2 andContext:(id)arg3;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)initializeWithContext:(id)arg1;
- (void)initNotifications;
- (void)initMapLayer;
- (void)initLogoImageView;
- (void)initTrafficColor;
- (void)initMapState;
- (void)initUserlocationSystem;
- (void)initAnnotationContainerView;
- (void)initOverlayContainerView;
- (void)initIndoorView;
- (void)initScaleView;
- (void)initCompassView;
- (void)initEnableAttributes;
- (void)initGesture;
- (void)updateInternalOverlayStatues;
- (id)internalWorldTileOverlay;
- (void)handleDidChangeOrientationNotification:(id)arg1;
- (void)handleDidBecomeActiveNotification;
- (void)indoorMapDidChangeFloorIndex:(id)arg1;
- (void)indoorMapDidShow:(id)arg1;
- (void)indoorMapDidHide:(_Bool)arg1;
- (void)setCurrentIndoorMapFloorIndex:(long long)arg1;
- (void)didMAIndoorValueChangedWithIndoorInfo:(id)arg1;
- (void)clearIndoorMapCache;
- (void)setShowsIndoorMapControl:(_Bool)arg1;
- (_Bool)isShowsIndoorMapControl;
- (void)setShowsIndoorMap:(_Bool)arg1;
- (_Bool)isShowsIndoorMap;
- (void)setIndoorViewHidden;
- (void)setIndoorMapControlOrigin:(struct CGPoint)arg1;
- (struct CGSize)indoorMapControlSize;
@property(readonly, nonatomic) struct CGSize scaleSize;
@property(nonatomic) struct CGPoint scaleOrigin;
@property(nonatomic) _Bool showsScale;
- (void)updateScaleViewForDistance:(double)arg1;
- (void)setCompassImage:(id)arg1;
@property(readonly, nonatomic) struct CGSize compassSize;
@property(nonatomic) struct CGPoint compassOrigin;
- (void)didCompassViewTapped;
- (void)updateCompassViewByDegree:(float)arg1 animated:(_Bool)arg2 duration:(double)arg3;
- (void)hideCompassView;
- (void)showCompassView;
- (struct CGPoint)offsetRangeForVelocity:(struct CGPoint)arg1;
- (double)animationDurationForVelocity:(struct CGPoint)arg1;
- (double)normalizeCameraDegree:(double)arg1;
- (double)normalizeRotationDegree:(double)arg1;
- (double)normalizeZoomLevel:(double)arg1;
- (struct CGPoint)normalizeScreenPoint:(struct CGPoint)arg1;
- (struct MAMapPoint)mapPointForPoint:(struct CGPoint)arg1 withProjection:(void *)arg2;
- (struct MAMapPoint)mapPointForPoint:(struct CGPoint)arg1;
- (struct CGPoint)pointForMapPoint:(struct MAMapPoint)arg1;
- (struct CGPoint)pointForEnginePoint:(struct CGPoint)arg1;
- (struct CGPoint)enginePointForPoint:(struct CGPoint)arg1;
- (struct CGAffineTransform)cgPointToEnginePointTransform;
- (struct MAMapPoint)centerPointForKeepingMapPivot:(struct MAMapPoint)arg1 onScreenAnchor:(struct CGPoint)arg2 inCameraHeaderDegree:(double)arg3;
- (struct MAMapPoint)centerPointForKeepingMapPivot:(struct MAMapPoint)arg1 onScreenAnchor:(struct CGPoint)arg2 inRotationDegree:(double)arg3;
- (struct MAMapPoint)centerPointForKeepingMapPivot:(struct MAMapPoint)arg1 onScreenAnchor:(struct CGPoint)arg2 inZoomLevel:(double)arg3;
- (struct MAMapPoint)centerPointForKeepingMapPivot:(struct MAMapPoint)arg1 onScreenAnchor:(struct CGPoint)arg2;
- (struct CGPoint)getScreenPivotForAnchor:(struct CGPoint)arg1;
- (struct CGPoint)getCurrentScreenAnchor:(struct CGPoint)arg1;
- (struct MAMapPoint)getDestinationPointWithZoomLevel:(double)arg1 atPivot:(struct CGPoint)arg2;
- (float)getPercentWithHeaderAngle;
- (double)zoomLevelCoverMapRect:(struct MAMapRect)arg1 edgePadding:(struct UIEdgeInsets)arg2;
- (double)zoomLevelFitMapRect:(struct MAMapRect)arg1 edgePadding:(struct UIEdgeInsets)arg2;
- (struct MAMapRect)mapRectForRect:(struct CGRect)arg1;
- (struct CGRect)rectForMapRect:(struct MAMapRect)arg1;
- (struct MACoordinateRegion)convertRect:(struct CGRect)arg1 toRegionFromView:(id)arg2;
- (struct CGRect)convertRegion:(struct MACoordinateRegion)arg1 toRectToView:(id)arg2;
- (struct CLLocationCoordinate2D)convertPoint:(struct CGPoint)arg1 toCoordinateFromView:(id)arg2;
- (struct CGPoint)convertCoordinate:(struct CLLocationCoordinate2D)arg1 toPointToView:(id)arg2;
- (struct MAMapRect)mapRectThatFits:(struct MAMapRect)arg1 edgePadding:(struct UIEdgeInsets)arg2;
- (struct MAMapRect)mapRectThatFits:(struct MAMapRect)arg1;
- (id)selectPoisAtEnginePoint:(struct CGPoint)arg1 engineRadius:(double)arg2;
- (id)takePoisAtPoint:(struct CGPoint)arg1;
- (double)calculateDistanceInMetersForZoomLevel:(double)arg1;
- (double)mapPointsPerScreenPointAtZoomLevel:(double)arg1;
- (struct CGRect)constraintRect:(struct CGRect)arg1 inRect:(struct CGRect)arg2 minimumSize:(struct CGSize)arg3;
- (id)imageByCombiningInConstraintSize:(struct CGSize)arg1 firstImage:(id)arg2 secondImage:(id)arg3 logoImage:(id)arg4 logoPosition:(struct CGPoint)arg5;
- (id)cutImage:(id)arg1 inRect:(struct CGRect)arg2;
- (struct CGRect)unionFrameForSubviews:(id)arg1 inView:(id)arg2;
- (void)didFailLoadingWithError:(id)arg1;
- (void)didFinishLoading;
- (void)willStartLoading;
- (void)referenceDidChange;
- (void)renderWithState:(long long)arg1;
@property(nonatomic) _Bool openGLESDisabled;
- (double)currentCameraDegree;
- (void)cameraToDegree:(double)arg1;
- (void)internalSetCameraDegree:(double)arg1 atPivot:(struct CGPoint)arg2 animated:(_Bool)arg3 duration:(double)arg4 mediaFunctionType:(long long)arg5 completeBlock:(CDUnknownBlockType)arg6;
- (void)setCameraDegree:(double)arg1 animated:(_Bool)arg2 duration:(double)arg3 andPivot:(struct CGPoint)arg4;
- (void)setCameraDegree:(double)arg1 animated:(_Bool)arg2 duration:(double)arg3;
@property(nonatomic) double cameraDegree;
- (double)currentRotationDegree;
- (void)rotateToDegree:(double)arg1;
- (void)internalSetRotationDegree:(double)arg1 atPivot:(struct CGPoint)arg2 animated:(_Bool)arg3 duration:(double)arg4 mediaFunctionType:(long long)arg5 completeBlock:(CDUnknownBlockType)arg6;
- (void)setRotationDegree:(double)arg1 animated:(_Bool)arg2 duration:(double)arg3 andPivot:(struct CGPoint)arg4;
- (void)setRotationDegree:(double)arg1 animated:(_Bool)arg2 duration:(double)arg3;
@property(nonatomic) double rotationDegree;
- (double)priorZoomLevel;
- (double)nextZoomLevel;
- (double)currentZoomLevel;
- (void)zoomToLevel:(double)arg1;
- (void)internalSetZoomLevel:(double)arg1 atPivot:(struct CGPoint)arg2 animated:(_Bool)arg3 duration:(double)arg4 mediaFunctionType:(long long)arg5 completeBlock:(CDUnknownBlockType)arg6;
- (void)setZoomLevel:(double)arg1 atPivot:(struct CGPoint)arg2 animated:(_Bool)arg3;
- (void)setZoomLevel:(double)arg1 animated:(_Bool)arg2;
@property(nonatomic) double zoomLevel;
@property(nonatomic) double minZoomLevel;
@property(nonatomic) double maxZoomLevel;
- (struct MAMapPoint)currentMapPointCenter;
- (void)doUpdateEngineMapPointCenter:(struct MAMapPoint)arg1;
- (void)scrollToMapPivot:(struct MAMapPoint)arg1;
- (void)internalSetMapPointCenter:(struct MAMapPoint)arg1 atZoom:(double)arg2 atPivot:(struct CGPoint)arg3 animated:(_Bool)arg4 duration:(double)arg5 mediaFunctionType:(long long)arg6 completeBlock:(CDUnknownBlockType)arg7;
- (void)internalSetMapPointCenter:(struct MAMapPoint)arg1 atPivot:(struct CGPoint)arg2 animated:(_Bool)arg3 duration:(double)arg4 mediaFunctionType:(long long)arg5 completeBlock:(CDUnknownBlockType)arg6;
- (void)setMapPointCenter:(struct MAMapPoint)arg1 animated:(_Bool)arg2 andPivot:(struct CGPoint)arg3;
- (void)setMapPointCenter:(struct MAMapPoint)arg1 animated:(_Bool)arg2;
- (_Bool)shouldExitUserTrackingModeDueToLimitMapRect;
- (void)setLimitMapRect:(struct MAMapRect)arg1 fitSize:(_Bool)arg2;
- (void)setLimitRegion:(struct MACoordinateRegion)arg1 fitSize:(_Bool)arg2;
- (void)internalSetMapPivot:(struct MAMapPoint)arg1 animated:(_Bool)arg2 withBlock:(CDUnknownBlockType)arg3;
- (void)internalSetMapPivot:(struct MAMapPoint)arg1 animated:(_Bool)arg2;
- (void)internalSetCenterCoordinate:(struct CLLocationCoordinate2D)arg1 animated:(_Bool)arg2;
- (void)setCenterCoordinate:(struct CLLocationCoordinate2D)arg1 animated:(_Bool)arg2;
@property(nonatomic) struct CLLocationCoordinate2D centerCoordinate;
- (struct MACoordinateRegion)regionThatFits:(struct MACoordinateRegion)arg1;
- (void)setRegion:(struct MACoordinateRegion)arg1 animated:(_Bool)arg2;
@property(nonatomic) struct MACoordinateRegion region;
- (void)internalSetVisibleMapRect:(struct MAMapRect)arg1 edgePadding:(struct UIEdgeInsets)arg2 animated:(_Bool)arg3;
- (void)setVisibleMapRect:(struct MAMapRect)arg1 edgePadding:(struct UIEdgeInsets)arg2 animated:(_Bool)arg3;
- (void)setVisibleMapRect:(struct MAMapRect)arg1 animated:(_Bool)arg2;
@property(nonatomic) struct MAMapRect visibleMapRect;
- (struct CGRect)getRectOnGround;
- (id)userLocationCircleRendererWithCircle:(id)arg1;
- (_Bool)isUserLocationCircle:(id)arg1;
- (id)createDrawableForOverlay:(id)arg1;
- (void)overlayContainerAddedDrawables:(id)arg1;
- (double)getMapZoomLevel;
- (double)metersPerPixelAtMapZoomLevel:(double)arg1;
- (void)deleteTextures:(id)arg1;
- (id)glesUnityInstance;
- (void)showOverlays:(id)arg1 edgePadding:(struct UIEdgeInsets)arg2 animated:(_Bool)arg3;
- (void)showOverlays:(id)arg1 animated:(_Bool)arg2;
- (id)rendererForOverlay:(id)arg1;
- (id)overlaysInLevel:(long long)arg1;
- (id)overlays;
- (void)insertOverlay:(id)arg1 belowOverlay:(id)arg2;
- (void)insertOverlay:(id)arg1 aboveOverlay:(id)arg2;
- (void)exchangeOverlay:(id)arg1 withOverlay:(id)arg2;
- (void)exchangeOverlayAtIndex:(unsigned long long)arg1 withOverlayAtIndex:(unsigned long long)arg2 atLevel:(long long)arg3;
- (void)exchangeOverlayAtIndex:(unsigned long long)arg1 withOverlayAtIndex:(unsigned long long)arg2;
- (void)insertOverlay:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)insertOverlay:(id)arg1 atIndex:(unsigned long long)arg2 level:(long long)arg3;
- (void)removeOverlays:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (void)addOverlays:(id)arg1 level:(long long)arg2;
- (void)addOverlay:(id)arg1 level:(long long)arg2;
- (void)addOverlays:(id)arg1;
- (void)addOverlay:(id)arg1;
- (void)updateHeadingForDeviceOrientation;
- (void)locationManager:(id)arg1 didUpdateHeading:(id)arg2;
- (void)locationManager:(id)arg1 didFailWithError:(id)arg2;
- (void)locationManager:(id)arg1 didUpdateLocations:(id)arg2;
- (void)updateUserLocationRepresentation:(id)arg1;
- (long long)userTrackingMode;
- (void)setUserTrackingMode:(long long)arg1 animated:(_Bool)arg2;
- (void)setUserTrackingMode:(long long)arg1;
- (_Bool)isUserLocationVisible;
- (id)userLocationAccuracyCircle;
- (void)requestLocationAuthorizationIfNeed;
- (void)resetUserLocationHeading;
- (void)updateUserLocationAngle;
- (void)removeAngleIndicator;
- (void)addAngleIndicator;
- (void)updateUserLocationInterface;
- (void)refreshHeadingOffsetWithOrientation:(long long)arg1;
- (void)addUserLocationInterface;
- (void)removeUserLocationInterface;
- (_Bool)userLocationInterfaceExisted;
- (void)decreaseUserTrackingModeWithFlag:(_Bool)arg1;
- (void)decreaseUserTrackingMode;
- (id)userLocationAnnotationViewWithAnnotation:(id)arg1;
- (void)notifyDelegateUpdateUserLocation:(id)arg1 updatingLocation:(_Bool)arg2;
- (_Bool)customizeUserLocationAccuracyCircleRepresentation;
- (void)setCustomizeUserLocationAccuracyCircleRepresentation:(_Bool)arg1;
- (_Bool)showsUserLocation;
- (void)setShowsUserLocation:(_Bool)arg1;
- (id)userLocation;
- (void)resumeFPS;
- (void)updateAnnotation:(id)arg1;
- (double)annotationContainerViewWithCalloutView:(id)arg1 delayForRepositionWithSize:(struct CGSize)arg2;
- (_Bool)annotationContainerViewDidCalloutViewShouldHighlight:(id)arg1;
- (void)annotationContainerViewDidCalloutViewClicked:(id)arg1;
- (void)annotationContainerViewDidTappedWithAnnotationView:(id)arg1 calloutAccessoryControlTapped:(id)arg2;
- (void)annotationContainerViewDidChangeDragWithAnnotationView:(id)arg1 toNewState:(long long)arg2 fromOldState:(long long)arg3;
- (void)annotationContainerViewDidDeselectAnnotationView:(id)arg1;
- (void)annotationContainerViewDidSelectAnnotationView:(id)arg1;
- (struct CLLocationCoordinate2D)annotationContainerViewCoordinate2DForPoint:(struct CGPoint)arg1;
- (struct CGPoint)annotationContainerViewPointForMapPoint:(struct MAMapPoint)arg1;
- (void)updateLockedAnnotationCoordIfNeeded:(id)arg1;
- (_Bool)needUpdateReusingPoolWithVisibleMapRect:(struct MAMapRect)arg1;
- (void)triggerDidAddAnnotationViewsDelegateWith:(id)arg1 isReUsing:(_Bool)arg2;
- (void)updateReusingPool;
- (void)showAnnotations:(id)arg1 edgePadding:(struct UIEdgeInsets)arg2 animated:(_Bool)arg3;
- (void)showAnnotations:(id)arg1 animated:(_Bool)arg2;
- (_Bool)allowsAnnotationViewSorting;
- (void)setAllowsAnnotationViewSorting:(_Bool)arg1;
- (struct CGRect)annotationVisibleRect;
- (id)selectedAnnotations;
- (void)setSelectedAnnotations:(id)arg1;
- (void)deselectAnnotation:(id)arg1 animated:(_Bool)arg2;
- (void)selectAnnotation:(id)arg1 animated:(_Bool)arg2;
- (id)dequeueReusableAnnotationViewWithIdentifier:(id)arg1;
- (id)viewForAnnotation:(id)arg1;
- (id)annotationsInMapRect:(struct MAMapRect)arg1;
- (id)annotations;
- (void)removeAnnotations:(id)arg1;
- (void)removeAnnotation:(id)arg1;
- (void)addAnnotations:(id)arg1;
- (void)addAnnotation:(id)arg1;
- (id)doAddAnnotation:(id)arg1 withValidAnnotationRect:(struct MAMapRect)arg2;
- (_Bool)isVisibleForAnnotation:(id)arg1 withValidAnnotationRect:(struct MAMapRect)arg2;
- (struct MAMapRect)annotationValidRect;
- (struct MAMapRect)annotationValidRectFromVisibleMapRect:(struct MAMapRect)arg1;
- (void)updateCenterForAnnotationView:(id)arg1;
- (id)defaultViewForAnnotation:(id)arg1;
- (void)updateAnnotationsCenterWithTime:(double)arg1;
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;
- (_Bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (_Bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (void)tapPanToZoomAction:(id)arg1;
- (void)longPressGesture:(id)arg1;
- (void)singleTapGesture:(id)arg1;
- (void)rotateGestureWith:(double)arg1 pivot:(struct CGPoint)arg2 andUIGestureRecognizerState:(long long)arg3;
- (void)rotateGesture:(id)arg1;
- (void)pullGestureWithCameraDegee:(double)arg1 pivot:(struct CGPoint)arg2 andUIGestureRecognizerState:(long long)arg3;
- (void)pullGesture:(id)arg1;
- (void)panGestureWithTranslation:(struct CGPoint)arg1 velocity:(struct CGPoint)arg2 pivot:(struct CGPoint)arg3 andUIGestureRecognizerState:(long long)arg4;
- (void)panGesture:(id)arg1;
- (void)pinchGestureWithZoomLevel:(double)arg1 pivot:(struct CGPoint)arg2 andUIGestureRecognizerState:(long long)arg3;
- (void)pinchGesture:(id)arg1;
- (void)zoomOutGesture:(id)arg1;
- (void)zoomInGesture:(id)arg1;
- (struct CGPoint)getGestureAnchorPoint:(id)arg1 andView:(id)arg2;
- (void)removeAnimationTaskWithKeyPath:(id)arg1;
- (void)addAnimationTask:(id)arg1;
- (void)addBaseAnimationTaskWithDuration:(double)arg1 fromValue:(id)arg2 toValue:(id)arg3 mediaFunctionType:(long long)arg4 keyPath:(id)arg5 andCompleteBlock:(CDUnknownBlockType)arg6;
- (void)addBaseAnimationTaskWithDuration:(double)arg1 fromValue:(id)arg2 toValue:(id)arg3 userData:(id)arg4 mediaFunctionType:(long long)arg5 keyPath:(id)arg6 andCompleteBlock:(CDUnknownBlockType)arg7;
- (void)doAnimationWithDuration:(double)arg1 andFrameInterval:(double)arg2;
- (unsigned long long)getAnimationCount;
- (void)notifyDelegateMapDidMoveByUser:(_Bool)arg1;
- (void)notifyDelegateMapWillMoveByUser:(_Bool)arg1;
- (void)notifyDelegateMapDidZoomByUser:(_Bool)arg1;
- (void)notifyDelegateMapWillZoomByUser:(_Bool)arg1;
- (void)notifyDelegateRegionDidChangeAnimated:(_Bool)arg1;
- (void)notifyDelegateRegionWillChangeAnimated:(_Bool)arg1;
- (id)getMapStatus;
- (void)setMapStatus:(id)arg1 animated:(_Bool)arg2 duration:(double)arg3;
- (void)setMapStatus:(id)arg1 animated:(_Bool)arg2;
- (void)changeMetersPerPointForCurrentZoom:(double)arg1;
- (double)metersPerPointForZoomLevel:(double)arg1;
- (_Bool)customMapStyleEnabled;
- (void)setCustomMapStyleEnabled:(_Bool)arg1;
- (void)updateCustomMapStyleByID;
- (void)setCustomMapStyleID:(id)arg1;
- (id)customTextureResourcePath;
- (void)setCustomTextureResourcePath:(id)arg1;
- (id)customStyleTextureDataWithMapStyleType:(long long)arg1 andDayType:(long long)arg2;
- (id)customStyleBkTileColorWithMapStyleType:(long long)arg1 andDayType:(long long)arg2;
- (id)customStyleDataWithMapStyleType:(long long)arg1 andDayType:(long long)arg2;
- (_Bool)customStyleEnabledWithMapStyleType:(long long)arg1 andDayType:(long long)arg2;
- (void)updateCustomStyleForCurrentMapType;
- (id)customMapTexturekeyForMapType:(long long)arg1;
- (id)originalMapStylekeyForMapType:(long long)arg1;
- (id)customMapStylekeyForMapType:(long long)arg1;
- (void)setCustomMapStyle:(id)arg1 forMaptype:(long long)arg2 isV2:(_Bool)arg3;
- (void)setCustomMapStyleWithWebData:(id)arg1;
- (void)setCustomMapStyle:(id)arg1;
- (void)internalSetMapType:(long long)arg1;
@property(readonly, nonatomic) struct CGSize logoSize;
@property(nonatomic) struct CGPoint logoCenter;
- (void)updateLogoStatusForMapRegion;
- (void)applyTrafficColor:(id)arg1;
- (unsigned int)unsignedIntARGBWithColor:(id)arg1;
- (_Bool)isInSkyMode;
- (void)setVectorOverlayData:(id)arg1 rect:(struct CGRect)arg2 withCompleteBlock:(CDUnknownBlockType)arg3;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (_Bool)showsFPS;
- (void)setShowsFPS:(_Bool)arg1;
- (void)setCustomSkyImageData:(id)arg1;
- (void)removeAllCustomBuilding;
- (void)removeCustomBuilding:(id)arg1;
- (void)addCustomBuilding:(id)arg1;
- (void)setCustomBuildingsCount:(unsigned int)arg1 andMaxBuildingArea:(unsigned int)arg2;
- (id)getMapDataPath;
- (double)rendererContentScale;
- (id)privateGetCurrentBuildingTileWithGridName:(id)arg1;
- (float *)getProjectionMatrix;
- (float *)getViewMatrix;
- (struct MAMapPoint)getCurrentOffsetPoint;
- (id)getCurrentGeometryTiles;
- (id)getCurrentTiles;
- (void)privateGetCurrentMAMapPoints:(struct MAMapPoint *)arg1;
- (struct CGRect)privateGetCurrentWinRect;
- (struct MAMapPoint)privateGetMAMapPointWithPoint:(struct CGPoint)arg1;
- (struct CGPoint)privateGetWinPointWithMAMapPoint:(struct MAMapPoint)arg1;
- (double)privateGetCurrentZoomLevel;
- (struct CGPoint)privateGetCurrentRotateDegreeAndCameraDegree;
- (struct CGPoint)privateGetPhysicalResolutionForPoint:(struct CGPoint)arg1;
- (double)privateGetMapPointLenForWinLen:(double)arg1;
- (struct CGPoint)privateGetGlPointForMapPoint:(struct MAMapPoint)arg1;
- (double)privateGetMapLenForPixelLen:(int)arg1;
- (void)clearDisk;
@property(nonatomic) double trafficRatio;
@property(copy, nonatomic) NSDictionary *trafficStatus;
- (_Bool)isVisibleMapRectAbroad;
@property(readonly, nonatomic) _Bool isAbroad;
- (void)mapLayerDidRemoveAllAnimations:(id)arg1;
- (void)mapLayer:(id)arg1 didRemoveAnimationForKey:(id)arg2;
- (_Bool)mapLayer:(id)arg1 canHandleAnimationForKey:(id)arg2;
- (void)mapLayer:(id)arg1 didAddAnimation:(id)arg2 forKey:(id)arg3;
- (_Bool)mapLayer:(id)arg1 canHandleAnimation:(id)arg2 forKey:(id)arg3;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (id)internalForKeyframeAnimation:(id)arg1 forKey:(id)arg2;
- (id)internalForBasicAnimation:(id)arg1 forKey:(id)arg2;
- (id)internalForMediaTimingFunction:(id)arg1;
- (void)didStopAnimation:(id)arg1 finished:(_Bool)arg2;
- (void)willAddAnimation:(id)arg1;
- (_Bool)canReceiveAnimation:(id)arg1 forKey:(id)arg2;
- (_Bool)isValidForAnimationKey:(id)arg1;
- (void)preRendererDraw;
- (void)doDeleteTexturesWithProperContext;
- (void)didReloadMap;
- (void)reloadMap;
- (void)popMapStatus;
- (void)pushMapStatus;
@property(nonatomic) _Bool isAllowDecreaseFrame;
@property(nonatomic) unsigned long long maxRenderFrame;
- (void)takeSnapshotInRect:(struct CGRect)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (id)takeSnapshotInRect:(struct CGRect)arg1;
- (id)takeSnapshotInRect:(struct CGRect)arg1 includeAnnotation:(_Bool)arg2;
- (id)takeSnapshotOnView:(id)arg1 size:(struct CGSize)arg2 path:(id)arg3;
- (id)takeOpenGLESSnapshot;
- (void)setAllowsBackgroundLocationUpdates:(_Bool)arg1;
- (_Bool)allowsBackgroundLocationUpdates;
- (void)setPausesLocationUpdatesAutomatically:(_Bool)arg1;
- (_Bool)pausesLocationUpdatesAutomatically;
- (void)setHeadingFilter:(double)arg1;
- (double)headingFilter;
- (void)setDesiredAccuracy:(double)arg1;
- (double)desiredAccuracy;
- (void)setDistanceFilter:(double)arg1;
- (double)distanceFilter;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(nonatomic) _Bool loadWorldVectorMap;
@property(readonly) Class superclass;

@end

