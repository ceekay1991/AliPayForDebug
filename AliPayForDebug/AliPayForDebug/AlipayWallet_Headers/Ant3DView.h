//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIView.h>

#import "Ant3DDetectorDelegate-Protocol.h"
#import "Ant3DGestureDetectorTrackDelegate-Protocol.h"
#import "Ant3DGestureErrorInfoDelegate-Protocol.h"
#import "Ant3DManagerCameraDelegate-Protocol.h"
#import "Ant3DMultiMediaManagerDelegate-Protocol.h"
#import "Ant3DSessionDelegate-Protocol.h"
#import "UIGestureRecognizerDelegate-Protocol.h"

@class APMLock, Ant3DBundleLoader, Ant3DDevice, Ant3DGuidePlaneBorder, Ant3DManager, Ant3DMultiMediaManager, Ant3DPlaneBorderInfo, Ant3DSceneSource, CADisplayLink, JSContext, NSMutableDictionary, NSString, TEXBeautyFunctor, TEXCameraSource, TEXContext, TEXFunctorDecorator, TEXImageSource, TEXSource, TEXSourceContainer, TEXSynthesizeFunctor, TEXTextureOutput, TEXView, TEXViewSource, UILabel;
@protocol Ant3DSceneDelegate, Ant3DViewDelegate, Ant3DViewUpdateListener;

@interface Ant3DView : UIView <Ant3DDetectorDelegate, Ant3DGestureErrorInfoDelegate, Ant3DGestureDetectorTrackDelegate, UIGestureRecognizerDelegate, Ant3DSessionDelegate, Ant3DMultiMediaManagerDelegate, Ant3DManagerCameraDelegate>
{
    struct Ant3dEngine *_engine;
    APMLock *_engineLock;
    _Bool _useJSCBridge;
    NSString *_jsString;
    struct IJSBridge *_jsBridge;
    struct IJSBridgeSupport *_bridgeSupport;
    struct AR3DGamePlayObserver *_gameplayObserver;
    struct AR3DViewControlImp *_ar3dControlImp;
    struct Ant3DGameObserver4TinyApp *_tinyAppCallBackObserver;
    struct CGRect _windowFrame;
    struct Ant3dConfig _config;
    struct Platform *_platform;
    CADisplayLink *_displayLink;
    _Bool _isDisplayUpdating;
    _Bool _updateFramebuffer;
    _Bool _firstReset;
    _Bool _skipCurrentFrame;
    unsigned int _defaultFramebuffer;
    unsigned int _depthRenderbuffer;
    int _framebufferWidth;
    int _framebufferHeight;
    unsigned int _multisampleFramebuffer;
    unsigned int _multisampleRenderbuffer;
    unsigned int _multisampleDepthbuffer;
    unsigned int _fboTexture;
    _Bool _oglDiscardSupported;
    APMLock *_renderLock;
    _Bool _renderEnabled;
    double _screenScale;
    struct CGPoint _lastPanPoint;
    float _lastZoomScale;
    _Bool _touchZoomEnable;
    _Bool _touchRotateEnable;
    _Bool _touchTranslateEnable;
    _Bool _enableGesture;
    TEXBeautyFunctor *_beautyFunctor;
    TEXSourceContainer *_cameraPipelineSource;
    _Bool _resetOnFirstTransform;
    struct CGSize _dimension;
    _Bool _distanceInitialized;
    _Bool _parFileLoad;
    _Bool _useTinyAppJSBridge;
    _Bool _enableGuidePlane;
    _Bool _loadViewCostTimeRet;
    _Bool _viewReadyCostTimeRet;
    _Bool _cameraStartRet;
    _Bool _frameTimeRet;
    _Bool _isBeautyRemoted;
    _Bool _autoLoadJs;
    float _trackeeSize;
    int _engineFps;
    id <Ant3DViewDelegate> _delegate;
    id <Ant3DSceneDelegate> _sceneDelegate;
    JSContext *_jscContext;
    NSString *_business;
    NSString *_appId;
    TEXSource *_recordSource;
    Ant3DMultiMediaManager *_multiMediaManager;
    Ant3DDevice *_device;
    Ant3DManager *_trackManager;
    TEXContext *_sceneContext;
    TEXContext *_videoContext;
    NSString *_modelNodeId;
    unsigned long long _trackMode;
    id <Ant3DViewUpdateListener> _sceneUpdateListener;
    Ant3DGuidePlaneBorder *_planeBorder;
    Ant3DPlaneBorderInfo *_borderInfo;
    TEXContext *_textContext;
    UILabel *_textLabel;
    TEXViewSource *_textViewSource;
    TEXTextureOutput *_textTextureFunctor;
    TEXImageSource *_imageSource;
    TEXTextureOutput *_imageTextureFunctor;
    NSMutableDictionary *_bindPreviewFunctorDic;
    TEXCameraSource *_cameraSource;
    TEXFunctorDecorator *_cameraPipeline;
    Ant3DSceneSource *_sceneSource;
    TEXFunctorDecorator *_scenePipeline;
    TEXSynthesizeFunctor *_synthesizer;
    TEXView *_synthesizerPreview;
    double _renderCost;
    double _loadViewCostTime;
    double _viewReadyCostTime;
    double _glTime;
    double _cameraStartCostTime;
    double _frameTime;
    unsigned long long _resSize;
    NSString *_modelId;
    double _onfirstFrameCostTime;
    double _engineLoadTime;
    double _engineRenderTime;
    double _engineRenderFrameNum;
    double _engineTotalRenderTime;
    double _engineStopTime;
    double _totalStopTime;
    double _totalPlayTime;
    double _renderCostTime;
    double _camTotalTime;
    double _camDrawTime;
    double _camSwapTime;
    double _modTotalTime;
    Ant3DBundleLoader *_bundleLoader;
    struct CGSize _remoteSize;
    struct CGSize _remotePreviewSize;
}

+ (_Bool)isSlamSupported;
@property(nonatomic) _Bool autoLoadJs; // @synthesize autoLoadJs=_autoLoadJs;
@property(retain, nonatomic) Ant3DBundleLoader *bundleLoader; // @synthesize bundleLoader=_bundleLoader;
@property(nonatomic) _Bool isBeautyRemoted; // @synthesize isBeautyRemoted=_isBeautyRemoted;
@property(nonatomic) double modTotalTime; // @synthesize modTotalTime=_modTotalTime;
@property(nonatomic) double camSwapTime; // @synthesize camSwapTime=_camSwapTime;
@property(nonatomic) double camDrawTime; // @synthesize camDrawTime=_camDrawTime;
@property(nonatomic) double camTotalTime; // @synthesize camTotalTime=_camTotalTime;
@property(nonatomic) double renderCostTime; // @synthesize renderCostTime=_renderCostTime;
@property(nonatomic) int engineFps; // @synthesize engineFps=_engineFps;
@property(nonatomic) struct CGSize remotePreviewSize; // @synthesize remotePreviewSize=_remotePreviewSize;
@property(nonatomic) double totalPlayTime; // @synthesize totalPlayTime=_totalPlayTime;
@property(nonatomic) double totalStopTime; // @synthesize totalStopTime=_totalStopTime;
@property(nonatomic) double engineStopTime; // @synthesize engineStopTime=_engineStopTime;
@property(nonatomic) double engineTotalRenderTime; // @synthesize engineTotalRenderTime=_engineTotalRenderTime;
@property(nonatomic) double engineRenderFrameNum; // @synthesize engineRenderFrameNum=_engineRenderFrameNum;
@property(nonatomic) double engineRenderTime; // @synthesize engineRenderTime=_engineRenderTime;
@property(nonatomic) double engineLoadTime; // @synthesize engineLoadTime=_engineLoadTime;
@property(nonatomic) double onfirstFrameCostTime; // @synthesize onfirstFrameCostTime=_onfirstFrameCostTime;
@property(retain, nonatomic) NSString *modelId; // @synthesize modelId=_modelId;
@property(nonatomic) unsigned long long resSize; // @synthesize resSize=_resSize;
@property(nonatomic) _Bool frameTimeRet; // @synthesize frameTimeRet=_frameTimeRet;
@property(nonatomic) double frameTime; // @synthesize frameTime=_frameTime;
@property(nonatomic) _Bool cameraStartRet; // @synthesize cameraStartRet=_cameraStartRet;
@property(nonatomic) double cameraStartCostTime; // @synthesize cameraStartCostTime=_cameraStartCostTime;
@property(nonatomic) double glTime; // @synthesize glTime=_glTime;
@property(nonatomic) _Bool viewReadyCostTimeRet; // @synthesize viewReadyCostTimeRet=_viewReadyCostTimeRet;
@property(nonatomic) double viewReadyCostTime; // @synthesize viewReadyCostTime=_viewReadyCostTime;
@property(nonatomic) _Bool loadViewCostTimeRet; // @synthesize loadViewCostTimeRet=_loadViewCostTimeRet;
@property(nonatomic) double loadViewCostTime; // @synthesize loadViewCostTime=_loadViewCostTime;
@property(nonatomic) struct CGSize remoteSize; // @synthesize remoteSize=_remoteSize;
@property(nonatomic) double renderCost; // @synthesize renderCost=_renderCost;
@property(retain, nonatomic) TEXView *synthesizerPreview; // @synthesize synthesizerPreview=_synthesizerPreview;
@property(retain, nonatomic) TEXSynthesizeFunctor *synthesizer; // @synthesize synthesizer=_synthesizer;
@property(retain, nonatomic) TEXFunctorDecorator *scenePipeline; // @synthesize scenePipeline=_scenePipeline;
@property(retain, nonatomic) Ant3DSceneSource *sceneSource; // @synthesize sceneSource=_sceneSource;
@property(retain, nonatomic) TEXFunctorDecorator *cameraPipeline; // @synthesize cameraPipeline=_cameraPipeline;
@property(retain, nonatomic) TEXCameraSource *cameraSource; // @synthesize cameraSource=_cameraSource;
@property(retain, nonatomic) NSMutableDictionary *bindPreviewFunctorDic; // @synthesize bindPreviewFunctorDic=_bindPreviewFunctorDic;
@property(retain, nonatomic) TEXTextureOutput *imageTextureFunctor; // @synthesize imageTextureFunctor=_imageTextureFunctor;
@property(retain, nonatomic) TEXImageSource *imageSource; // @synthesize imageSource=_imageSource;
@property(retain, nonatomic) TEXTextureOutput *textTextureFunctor; // @synthesize textTextureFunctor=_textTextureFunctor;
@property(retain, nonatomic) TEXViewSource *textViewSource; // @synthesize textViewSource=_textViewSource;
@property(retain, nonatomic) UILabel *textLabel; // @synthesize textLabel=_textLabel;
@property(retain, nonatomic) TEXContext *textContext; // @synthesize textContext=_textContext;
@property(retain, nonatomic) Ant3DPlaneBorderInfo *borderInfo; // @synthesize borderInfo=_borderInfo;
@property(retain, nonatomic) Ant3DGuidePlaneBorder *planeBorder; // @synthesize planeBorder=_planeBorder;
@property(nonatomic) __weak id <Ant3DViewUpdateListener> sceneUpdateListener; // @synthesize sceneUpdateListener=_sceneUpdateListener;
@property(nonatomic) unsigned long long trackMode; // @synthesize trackMode=_trackMode;
@property(retain, nonatomic) NSString *modelNodeId; // @synthesize modelNodeId=_modelNodeId;
@property(retain, nonatomic) TEXContext *videoContext; // @synthesize videoContext=_videoContext;
@property(retain, nonatomic) TEXContext *sceneContext; // @synthesize sceneContext=_sceneContext;
@property(nonatomic) _Bool enableGuidePlane; // @synthesize enableGuidePlane=_enableGuidePlane;
@property(retain, nonatomic) Ant3DManager *trackManager; // @synthesize trackManager=_trackManager;
@property(retain, nonatomic) Ant3DDevice *device; // @synthesize device=_device;
@property(retain, nonatomic) Ant3DMultiMediaManager *multiMediaManager; // @synthesize multiMediaManager=_multiMediaManager;
@property(retain, nonatomic) TEXSource *recordSource; // @synthesize recordSource=_recordSource;
@property(retain, nonatomic) NSString *appId; // @synthesize appId=_appId;
@property(retain, nonatomic) NSString *business; // @synthesize business=_business;
@property(nonatomic) float trackeeSize; // @synthesize trackeeSize=_trackeeSize;
@property(nonatomic) __weak JSContext *jscContext; // @synthesize jscContext=_jscContext;
@property(nonatomic) _Bool useTinyAppJSBridge; // @synthesize useTinyAppJSBridge=_useTinyAppJSBridge;
@property(nonatomic) __weak id <Ant3DSceneDelegate> sceneDelegate; // @synthesize sceneDelegate=_sceneDelegate;
@property(nonatomic) __weak id <Ant3DViewDelegate> delegate; // @synthesize delegate=_delegate;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)session:(id)arg1 markerSize:(float)arg2;
- (_Bool)session:(id)arg1 getVisibleWithZoom:(float)arg2;
- (void)session:(id)arg1 getCurrentRotation:(float *)arg2;
- (void)session:(id)arg1 getCurrentMatrix:(float *)arg2;
- (float)sessionGetDefaultModelSize:(id)arg1;
- (float)sessionGetDefaultCameraDistance:(id)arg1;
- (struct _GLKMatrix4)session:(id)arg1 getWorldMatrixWithNode:(id)arg2;
- (struct _GLKVector3)session:(id)arg1 getUpVectorWithNode:(id)arg2;
- (struct _GLKVector3)session:(id)arg1 getPositionWithNode:(id)arg2;
- (struct _GLKVector3)session:(id)arg1 getPlaneIntersectionWithRayOrigin:(struct _GLKVector3)arg2 direction:(struct _GLKVector3)arg3 planeNormal:(struct _GLKVector3)arg4 planeDistance:(double)arg5;
- (struct _GLKVector3)session:(id)arg1 getScaleWithNode:(id)arg2;
- (struct _GLKVector3)session:(id)arg1 getForwardVectorWithNode:(id)arg2;
- (float)session:(id)arg1 calcPlaneIntersectionWithScreenPoint:(struct CGPoint)arg2 planeNormal:(struct _GLKVector3)arg3 planeDistance:(double)arg4 dst:(struct _GLKVector3 *)arg5;
- (void)session:(id)arg1 resetCameraImmediately:(_Bool)arg2;
- (void)sessionClearCameraPosition:(id)arg1;
- (void)session:(id)arg1 trackModeChange:(unsigned long long)arg2;
- (void)session:(id)arg1 trackingDidInitialized:(_Bool)arg2;
- (void)session:(id)arg1 didUpdatePlaneBorderInfo:(id)arg2;
- (void)sessionPlaneWasSetup:(id)arg1;
- (void)sessionWasStopped:(id)arg1;
- (void)sessionWasStarted:(id)arg1;
- (void)session:(id)arg1 didFailWithError:(id)arg2;
- (void)session:(id)arg1 cameraDidChangeTrackingState:(id)arg2;
- (void)session:(id)arg1 didUpdateAnchors:(id)arg2;
- (void)session:(id)arg1 didUpdateFrame:(id)arg2;
- (id)getTextureParametersWithNodeId:(id)arg1;
- (void)logForLoadEngine:(_Bool)arg1;
- (void)logForLoadModel:(id)arg1 result:(_Bool)arg2;
- (void)logForLoadHEVC:(id)arg1;
- (id)getResIdWithPath:(id)arg1 checkExist:(_Bool)arg2;
- (id)resIdForPath:(id)arg1 withResPaths:(id)arg2;
- (id)getPlaneHitResult:(struct CGPoint)arg1;
- (void)resetModelWithPoint:(struct CGPoint)arg1;
- (struct CGSize)sceneTextureSize;
- (unsigned int)sceneTexture;
- (void)setEnableBeauty:(_Bool)arg1;
- (void)setBeautyLevel:(float)arg1;
- (id)cameraPipelineSource;
- (id)beautyFunctor;
- (void)swapBuffers;
- (void)deleteFramebuffer;
- (_Bool)createFramebuffer;
- (_Bool)updateInternal:(unsigned long long)arg1;
- (void)update:(id)arg1;
- (void)initGL;
- (void)startUpdating;
- (void)initResourcePath;
- (id)bundleLoaderGetContentsOfFile:(id)arg1;
- (_Bool)hasbundleLoader;
- (void)reset;
- (void)uninitialize;
- (void)initialize;
- (void)resetTrack;
- (void)uninitTrack;
- (void)initTrack;
- (void)resetView;
- (void)uninitView;
- (void)initView;
- (void)resetRenderer;
- (void)uninitRenderer;
- (void)enableCameraSource:(_Bool)arg1;
- (void)initRenderer;
- (void)resetScene;
- (void)uninitScene;
- (void)initScene;
- (void)unregisterNotifications;
- (void)registerNotifications;
- (void)logForDeviceInfo;
- (void)resetPipeline;
- (void)configPipeline:(id)arg1;
- (void)checkConfig;
- (void)setEnvironmentTexturingUpdate:(_Bool)arg1 withNode:(id)arg2;
- (void)unbindEnvironmentTexturingInternalWithNodeId:(id)arg1;
- (void)bindEnvironmentTexturingInternalWithNodeId:(id)arg1;
- (void)uninit:(_Bool)arg1;
- (id)clone:(id)arg1;
- (void)updateCameraSource:(id)arg1;
- (void)updateFrame:(id)arg1;
- (void)updateCameraTransformAndCameraSource:(id)arg1;
- (void)setTransform:(float *)arg1 nodeId:(id)arg2;
- (void)setProjection:(float *)arg1;
- (void)resetCamera;
- (void)updateSessionParameters;
- (void)finishResetCamera;
- (void)setRenderEnabled:(_Bool)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)applicationWillResignActive:(id)arg1;
- (id)getFullPathWithPath:(id)arg1;
- (_Bool)saftyUseEngineWithBlock:(CDUnknownBlockType)arg1;
- (_Bool)tryLockRender;
- (void)exitRender;
- (void)handlePanFrom:(id)arg1;
- (void)handleSwipeGesture:(id)arg1;
- (void)handleTapFrom:(id)arg1;
- (void)handlePinchFrom:(id)arg1;
- (void)initGestures;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (_Bool)unlockRender;
- (_Bool)lockRender;
- (void)stopEnvironmentTexturingWithNodeIds:(id)arg1;
- (void)startEnvironmentTexturingWithNodeIds:(id)arg1;
- (void)bindGuidePlaneBindNodeId:(id)arg1;
- (void)setGuidePlaneLineColor:(id)arg1 planeColor:(id)arg2 scale:(float)arg3;
- (_Bool)isVisibleOnScreenWithNode:(id)arg1;
- (void)setHTMLText:(id)arg1 forNodeId:(id)arg2;
- (void)setImage:(id)arg1 forNodeId:(id)arg2;
- (void)renderCameraPixelBuffer:(struct __CVBuffer *)arg1 orientation:(long long)arg2 capturePosition:(long long)arg3;
- (struct _GLKMatrix4)calculateUVMatrixWithOrientation:(long long)arg1 capturePosition:(long long)arg2;
- (void)enableParFileLoad;
- (_Bool)isPlaneDetectionSupported;
- (void)set2DTransform:(id)arg1 rect:(struct CGRect)arg2 imageWidth:(double)arg3 imageHeight:(double)arg4 imageOrientation:(long long)arg5 isMirror:(_Bool)arg6;
- (void)setTransform:(float *)arg1 cs:(unsigned long long)arg2 nodeId:(id)arg3;
- (void)setTransform:(float *)arg1;
- (void)playDefaultAnimation;
- (void)playDefaultAnimation:(int)arg1;
- (void)enableGestureTranslate:(_Bool)arg1;
- (void)enableGestureRotate:(_Bool)arg1;
- (void)enableGestureZoom:(_Bool)arg1;
- (_Bool)startRunning;
- (_Bool)loadBundleData:(id)arg1;
- (_Bool)loadBundle:(id)arg1;
- (void)loadScene:(id)arg1 withResPaths:(id)arg2;
- (_Bool)canBecomeFirstResponder;
- (_Bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (_Bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (void)layoutSubviews;
- (void)willMoveToSuperview:(id)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)gestureTrackRect:(struct CGRect)arg1 pixelWidth:(double)arg2 pixelHeight:(double)arg3 isMirror:(_Bool)arg4 isLost:(_Bool)arg5 nodeId:(id)arg6;
- (void)gestureUpdateSuccessErrorImageId:(id)arg1 gestureId:(id)arg2;
- (id)roiFromViewToImageFrame:(id)arg1 pixelWidth:(unsigned long long)arg2 pixelHeight:(unsigned long long)arg3 imageOrientation:(long long)arg4 mirror:(_Bool)arg5;
- (id)pointFromImageToViewFrame:(id)arg1 pixelWidth:(unsigned long long)arg2 pixelHeight:(unsigned long long)arg3 imageOrientation:(long long)arg4 mirror:(_Bool)arg5;
- (void)mirrorXMatrix:(float *)arg1;
- (void)setMarkerSize:(float)arg1;
- (void)videoSaveCallBack:(id)arg1 didFinishSavingWithError:(id)arg2 contextInfo:(void *)arg3;
- (void)imageSaveCallBack:(id)arg1 didFinishSavingWithError:(id)arg2 contextInfo:(void *)arg3;
- (void)stopTinyAppGameObserver;
- (void)initTinyAppGameObserver;
- (void)sendMessage:(id)arg1 extra:(id)arg2;
- (void)stopJsBridge;
- (void)startRunJs;
- (void)initJsBridge;
- (void)registerJsFunc;
- (void)setBridgeRecordVideoBlock:(CDUnknownBlockType)arg1;
- (void)setBridgeRecordImageBlock:(CDUnknownBlockType)arg1;
- (void)setBridgeIRBlock:(CDUnknownBlockType)arg1;
- (void)sendJsEvent:(id)arg1 extra:(id)arg2;
- (void)onTrackChange:(unsigned long long)arg1;
- (void)appendJsString:(id)arg1;
- (void)setBridgeSupport:(void *)arg1 withJsString:(id)arg2;
- (void)setGameplayOberver:(void *)arg1;
- (void)removeResSearchPath:(id)arg1;
- (void)addResSearchPath:(id)arg1;
- (void)loadNode:(id)arg1 scene:(id)arg2 anim:(id)arg3 dest:(id)arg4;
- (void)resetSlamModel:(double)arg1 y:(double)arg2;
- (id)coordTransform:(double)arg1 y:(double)arg2 z:(double)arg3 flag:(_Bool)arg4;
- (void)setLightOuterAngleWithNodeId:(id)arg1 outerAngle:(double)arg2;
- (void)setLightInnerAngleWithNodeId:(id)arg1 innerAngle:(double)arg2;
- (void)setLightRangeWithNodeId:(id)arg1 range:(double)arg2;
- (void)setLightColorWithNodeId:(id)arg1 r:(double)arg2 g:(double)arg3 b:(double)arg4;
- (void)setAmbientColor:(double)arg1 g:(double)arg2 b:(double)arg3;
- (id)getTrackNodes;
- (void)setTrackWithNodeId:(id)arg1 active:(_Bool)arg2;
- (id)getFaceTrackNodes;
- (void)setFaceTrackWithNodeId:(id)arg1 active:(_Bool)arg2;
- (void)setFixedWithNodeId:(id)arg1 active:(_Bool)arg2;
- (void)setStaticWithNodeId:(id)arg1 active:(_Bool)arg2;
- (void)setBillboardWithNodeId:(id)arg1 active:(_Bool)arg2;
- (void)particleEffectWithNodeId:(id)arg1 active:(_Bool)arg2;
- (_Bool)isNodeVisibleWithNodeId:(id)arg1;
- (_Bool)setVisible:(_Bool)arg1 withNodeId:(id)arg2;
- (void)setMaterialMethodParamWithNodeId:(id)arg1 name:(id)arg2 method:(id)arg3;
- (void)setMaterialVec4ParamWithNodeId:(id)arg1 name:(id)arg2 x:(float)arg3 y:(float)arg4 z:(float)arg5 w:(float)arg6;
- (void)setMaterialVec3ParamWithNodeId:(id)arg1 name:(id)arg2 x:(float)arg3 y:(float)arg4 z:(float)arg5;
- (void)setMaterialVec2ParamWithNodeId:(id)arg1 name:(id)arg2 x:(float)arg3 y:(float)arg4;
- (void)setMaterialParameterWithNodeId:(id)arg1 name:(id)arg2 value:(float)arg3;
- (void)modulateAlphaWithNodeId:(id)arg1 a:(double)arg2 meshPart:(long long)arg3;
- (void)modulateColorWithNodeId:(id)arg1 r:(double)arg2 g:(double)arg3 b:(double)arg4 a:(double)arg5 meshPart:(long long)arg6;
- (void)setNodeTextureBufferWithNodeId:(id)arg1 buffer:(void *)arg2 length:(unsigned long long)arg3 w:(unsigned long long)arg4 h:(unsigned long long)arg5 uvMat:(float *)arg6;
- (void)removeTextureCache:(id)arg1;
- (void)setNodeTextureWithNodeId:(id)arg1 imagePath:(id)arg2 meshPart:(long long)arg3;
- (id)nodePickWithX:(double)arg1 andY:(double)arg2;
- (id)getScaleWithNodeName:(id)arg1 worldSpace:(_Bool)arg2;
- (id)getRotationWithNodeName:(id)arg1 worldSpace:(_Bool)arg2;
- (id)getPostionWithNodeName:(id)arg1 worldSpace:(_Bool)arg2;
- (void)rotateWithNodeName:(id)arg1 x:(double)arg2 y:(double)arg3 z:(double)arg4 worldSpace:(_Bool)arg5;
- (void)translateWithNodeName:(id)arg1 x:(double)arg2 y:(double)arg3 z:(double)arg4 worldSpace:(_Bool)arg5;
- (void)scaleWithNodeName:(id)arg1 x:(double)arg2 y:(double)arg3 z:(double)arg4 worldSpace:(_Bool)arg5;
- (void)rotateWithX:(double)arg1 y:(double)arg2 z:(double)arg3;
- (void)translateWithX:(double)arg1 y:(double)arg2 z:(double)arg3;
- (void)scaleWithX:(double)arg1 y:(double)arg2 z:(double)arg3;
- (void)loadAnimation:(id)arg1;
- (void)crossFadeAnimation:(id)arg1 dstAnimationName:(id)arg2 duration:(float)arg3;
- (void)clearAdditiveAnimation:(id)arg1;
- (void)setAdditiveAnimation:(id)arg1 propertyId:(long long)arg2 values:(float *)arg3;
- (void)resume;
- (void)pause;
- (void)resumeAnimations;
- (void)pauseAnimations;
- (void)createAnimation:(id)arg1 nodeId:(id)arg2 propertyId:(long long)arg3 keyCount:(long long)arg4 keyTimes:(unsigned int *)arg5 keyValues:(float *)arg6 interType:(long long)arg7;
- (void)createClip:(id)arg1 animId:(id)arg2 begin:(long long)arg3 end:(long long)arg4;
- (id)animationClips;
- (void)stopAnimation:(id)arg1;
- (void)pauseAnimation:(id)arg1;
- (void)playAnimation:(id)arg1 repeatCount:(long long)arg2;
- (void)playAnimation:(id)arg1 repeatCount:(long long)arg2 playSpeed:(double)arg3 blendWeight:(double)arg4;
- (unsigned long long)getEngineFPS;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

