//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIView.h>

#import "APMAudioSessionManagerDelegate-Protocol.h"

@class CTCallCenter, LivePlayerInternal, NSDate, NSString, NSTimer;
@protocol APMLivePlayerDelegate;

@interface APMLivePlayer : UIView <APMAudioSessionManagerDelegate>
{
    _Bool _shouldAutoplay;
    _Bool _beautySwitch;
    _Bool _playingBeforeInterruption;
    _Bool _pauseInBackground;
    _Bool _keepScreenOnWhilePlaying;
    _Bool _oldScreenOnStatus;
    _Bool _prepareToPlayNoticed;
    _Bool _didReport4AirplaneMode;
    _Bool _liveStreaming;
    id <APMLivePlayerDelegate> _playerDelegate;
    double _connectTimeOut;
    double _bufferingCostTime;
    NSDate *_playerFirstStartedDate;
    CDUnknownBlockType _traceLogHandler;
    double _beautyLevel;
    UIView *_preview;
    LivePlayerInternal *_player;
    unsigned long long _videoType;
    NSTimer *_reportCurTimer;
    unsigned long long _oldState;
    NSString *_identifier;
    NSString *_encryptKey;
    NSString *_encryptMethod;
    unsigned long long _curState;
    NSDate *_bufferingStartDate;
    NSDate *_date4TraceID;
    CTCallCenter *_callCenter;
}

+ (_Bool)isLivePlaySupported;
@property(nonatomic, getter=isLiveStreaming) _Bool liveStreaming; // @synthesize liveStreaming=_liveStreaming;
@property(nonatomic) _Bool didReport4AirplaneMode; // @synthesize didReport4AirplaneMode=_didReport4AirplaneMode;
@property(retain, nonatomic) CTCallCenter *callCenter; // @synthesize callCenter=_callCenter;
@property(retain, nonatomic) NSDate *date4TraceID; // @synthesize date4TraceID=_date4TraceID;
@property(retain, nonatomic) NSDate *bufferingStartDate; // @synthesize bufferingStartDate=_bufferingStartDate;
@property(nonatomic) unsigned long long curState; // @synthesize curState=_curState;
@property(copy, nonatomic) NSString *encryptMethod; // @synthesize encryptMethod=_encryptMethod;
@property(copy, nonatomic) NSString *encryptKey; // @synthesize encryptKey=_encryptKey;
@property(retain, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(nonatomic) _Bool prepareToPlayNoticed; // @synthesize prepareToPlayNoticed=_prepareToPlayNoticed;
@property(nonatomic) _Bool oldScreenOnStatus; // @synthesize oldScreenOnStatus=_oldScreenOnStatus;
@property(nonatomic) _Bool keepScreenOnWhilePlaying; // @synthesize keepScreenOnWhilePlaying=_keepScreenOnWhilePlaying;
@property(nonatomic) _Bool pauseInBackground; // @synthesize pauseInBackground=_pauseInBackground;
@property(nonatomic) _Bool playingBeforeInterruption; // @synthesize playingBeforeInterruption=_playingBeforeInterruption;
@property(nonatomic) unsigned long long oldState; // @synthesize oldState=_oldState;
@property(retain, nonatomic) NSTimer *reportCurTimer; // @synthesize reportCurTimer=_reportCurTimer;
@property(nonatomic) _Bool beautySwitch; // @synthesize beautySwitch=_beautySwitch;
@property(nonatomic) unsigned long long videoType; // @synthesize videoType=_videoType;
@property(retain, nonatomic) LivePlayerInternal *player; // @synthesize player=_player;
@property(retain, nonatomic) UIView *preview; // @synthesize preview=_preview;
@property(nonatomic) double beautyLevel; // @synthesize beautyLevel=_beautyLevel;
@property(copy, nonatomic) CDUnknownBlockType traceLogHandler; // @synthesize traceLogHandler=_traceLogHandler;
@property(retain, nonatomic) NSDate *playerFirstStartedDate; // @synthesize playerFirstStartedDate=_playerFirstStartedDate;
@property(nonatomic) double bufferingCostTime; // @synthesize bufferingCostTime=_bufferingCostTime;
@property(nonatomic) double connectTimeOut; // @synthesize connectTimeOut=_connectTimeOut;
@property(nonatomic) _Bool shouldAutoplay; // @synthesize shouldAutoplay=_shouldAutoplay;
@property(nonatomic) __weak id <APMLivePlayerDelegate> playerDelegate; // @synthesize playerDelegate=_playerDelegate;
- (void).cxx_destruct;
- (void)traceLogWithType:(unsigned long long)arg1 error:(id)arg2;
- (_Bool)needReportRemoteLog;
- (int)arc4randomLessthan:(int)arg1;
- (id)generateEagleID;
- (void)removeMovieNotificationObservers;
- (void)installMovieNotificationObservers;
- (void)listenPhoneCallStatusChange;
- (void)handleNetworkStatusChange:(id)arg1;
- (void)stopMonitoringNetworkStatusChange;
- (void)startMonitoringNetworkStatusChange;
- (void)applicationWillTerminate;
- (void)applicationDidEnterBackground;
- (void)applicationWillEnterForeground;
- (void)handleAudioSessionRouteChange:(id)arg1;
- (void)handleInterruption:(id)arg1;
- (void)createInternalPlayerFailed;
- (void)moviePlayBackStateDidChange:(id)arg1;
- (void)mediaIsPreparedToPlayDidChange:(id)arg1;
- (void)moviePlayBackDidFinish:(id)arg1;
- (void)loadStateDidChange:(id)arg1;
- (void)delegateForNetStatusChangedFromStatus:(long long)arg1 toStatus:(long long)arg2;
- (void)delegateForLoadStateDidChange:(unsigned long long)arg1;
- (void)delegateForStateChangedTo:(unsigned long long)arg1;
- (void)delegateForLivePlayerDidFinishToEnd;
- (void)delegateForPlayedCurrentTime:(double)arg1;
- (void)delegateForFailedWithError:(id)arg1;
- (void)playerWillBecomeBackground;
- (void)playerWillEnterForeground;
- (void)playerDidEnterBackground;
- (void)resumeScreenOnStatus;
- (void)setScreenOnStatus;
- (void)notifyDelegateConnetTimeout;
- (void)notifyDelegateCurrentPlayTime:(double)arg1;
- (void)reportCurrtime;
- (void)reportCurrtimerStop;
- (void)reportCurrtimerPause;
- (void)reportCurrtimerStart;
- (void)prepareToPlay;
- (void)typeWithIdentifier:(id)arg1;
- (void)removePlayer;
- (void)createPlayer;
@property(readonly, nonatomic) long long netStatus;
@property(readonly, nonatomic, getter=getBufferingProgress) long long bufferingProgress;
@property(readonly, nonatomic, getter=getDurationWatched) double durationWatched;
@property(readonly, nonatomic, getter=getTotalDuration) double totalDuration;
- (void)setEncryptKey:(id)arg1 method:(id)arg2;
- (void)retryToPlay;
- (void)seekEnd;
- (id)seekToTime:(double)arg1;
- (_Bool)isPlaying;
- (void)pause;
- (void)stop;
- (void)play;
- (id)getIdentifier;
- (void)dealloc;
- (void)layoutSubviews;
- (id)initWithFrame:(struct CGRect)arg1;

@end

